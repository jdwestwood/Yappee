// create a search result tab and process the search results from Google

      function make_search_result_tab(search_url, tab_title, searchTerms, on_search_result_complete) {
      // make a Google search results tab using the Google query url search_url; searchTerms is an array generated from
      // the form data using jQuery .serializeArray and is used to populate the search terms summary at the top of the
      // search results page and the search terms popover for the tab; on_search_result_complete is an optional
      // callback called when the page is complete. 
        nSearchResultTabs += 1;
        var tab_name = (tab_title == '') ? 'S-' + nSearchResultTabs.toString() : tab_title;
        var tab_id = "searchTab_" + nSearchResultTabs;
        var tab_content_id = "result_" + nSearchResultTabs;
        var iframe_id = "gps_result_" + nSearchResultTabs;
        var navTabHTML = _.template( $("script#bs_nav-tab").html(),
                                     {tab_id: tab_id, tab_content_id: tab_content_id, tab_name: tab_name});
        var tabContentHTML = _.template( $("script#bs_tab-pane").html(),
          {tab_content_id: tab_content_id, iframe_id: iframe_id, iframe_width: 1050, iframe_height: googleIFrameHeight});
        $("div.tab-pane.active").after(tabContentHTML);
        $("ul#topTabs li.active").after(navTabHTML);
        // table at the top of the search result page
        var searchTermsTable = new HTMLSummaryTable("script#search-term-table", searchTerms);
        // table in the popover for the page
        var popoverTable = new HTMLSummaryTable("script#search-term-popover", searchTerms);
        var $iframe = $("iframe#" + iframe_id)
        $iframe.css("visibility", "hidden")
               .on("load", on_search_result_load);
        $.cookie("yappee_cl", clientCookie);
        $("iframe#" + iframe_id).attr("src", search_url);

        function on_search_result_load() {
          var $context = $(this).contents();       // 'this' is the iframe HTML element
          process_links($context, "search");       // make google links point to my server
          process_search_result_contents($context, searchTermsTable.html());       // set up search terms summary at top of page
          tabPopoverManager.setupSearchTabPopover(tab_id, popoverTable.html());    // set up popover for the tab for this page
          $.removeCookie("yappee_cl");
          $("a#" + tab_id).tab("show");
          window.scrollTo(0,0);
          window.focus();
          window.setTimeout(function() {$iframe.css("visibility", "visible");}, 1000);
          if (on_search_result_complete) {
            on_search_result_complete();
          }
        }
      }

      function make_more_result_tab($iframe, more_result_url) {
      // load more search results into the current iframe ($iframe is a jQuery object)
        htmlSearchTermsTable = $("div#jdw1", $iframe.contents()).clone();
        $iframe.off("load");                                          // remove original search result load event handler
        $iframe.css("visibility", "hidden")
               .on("load", {"htmlSearchTermsTable": htmlSearchTermsTable}, on_more_result_load);
        $.cookie("yappee_cl", clientCookie);
        $iframe.attr("src", more_result_url);

        function on_more_result_load(event) {
          var $context = $(this).contents();
          process_links($context, "search");
          process_search_result_contents($context, event.data.htmlSearchTermsTable);
          // htmlSearchTermsTable has been cloned from the original search page; popover has already been attached to the tab
          $.cookie("yappee_cl", clientCookie);
          window.scrollTo(0,0);
          window.focus();
          window.setTimeout(function() {$iframe.css("visibility", "visible");}, 1000);
        }
      }

      function HTMLSummaryTable(scriptName, searchTerms) {
      // class to create and populate the html template defined in scriptName with a table of searchTerms; called from
      // make_search_result_tab to create HTML for the search terms table and the popover table of search terms; gets
      // the search terms from the Google advanced patent search form or from a searchTerms array created when the user
      // clicks on author or assignee links in tabs or biblios.

        this.html = function() {
          var templateVars = makeTemplateVars(searchTerms);
          return _.template( $(scriptName).html(), templateVars);
        }

        function makeTemplateVars(searchTerms) {
        // return an object containing the names and values of the search terms to be templated
          var templateVars = initializeTemplateVars();
          var searchFormNames = initializeFormNames();
          var dateInfo = {};
          var inputName = '', entryName = '', entryValue = '';
          var maxChar = 25;
          var tableEntry = 0;
          searchTerms.forEach( function(inputField) {
            inputName = inputField["name"];
            if (searchFormNames.formFields[inputName]) {      // there are some input fields we have not defined in .formFields
              entryName = searchFormNames.formFields[inputName];
              entryValue = inputField["value"];
              switch (entryName) {
                case "All of: ": case "Exactly: ": case "At least one: ": case "None of: ": case "Patent: ":
                case "Title: ": case "Inventor: ": case "Assignee: ": case "US class: ": case "Intl class: ": case "Coop class: ":
                  if (entryValue != "") {
                    tableEntry += 1;
                    templateVars["t"+tableEntry] = entryName;
                    // no need to truncate long strings; CSS of the class .vcell takes care of it!
                    templateVars["v"+tableEntry] = entryValue;
                  }
                  break;
                case "Type: ": case "ChkBoxPatDateOptions": case "MinMonth": case "MinYear": case "MaxMonth":
                case "MaxYear": case "Restrict by":
                  dateInfo[entryName] = entryValue;                 // need to store these values and process them separately
                  break;
              }
            }
          });

          tableEntry = 4*Math.ceil(tableEntry/4);                            // round to nearest multiple of 4
          tableEntry += 1;
          templateVars["t"+tableEntry] = "Type: ";                      // put in the last column in the table
          templateVars["v"+tableEntry] = searchFormNames.type[dateInfo["Type: "]];
          if (dateInfo["ChkBoxPatDateOptions"] == 'q') {                     // no restriction on date
            tableEntry += 1;
            templateVars["t"+tableEntry] = "Date: ";
            templateVars["v"+tableEntry] = "Any";
          }
          else {                                                             // process the date restrictions
            tableEntry += 1;
            templateVars["t"+tableEntry] = "Start date: ";
            if (dateInfo["MinYear"] == "") {
              templateVars["v"+tableEntry] = "Any";
            }
            else {
              templateVars["v"+tableEntry] = searchFormNames.month[dateInfo["MinMonth"]] + dateInfo["MinYear"];
            }
            tableEntry += 1;
            templateVars["t"+tableEntry] = "End date: ";
            if (dateInfo["MaxYear"] == "") {
              templateVars["v"+tableEntry] = "Any";
            }
            else {
              templateVars["v"+tableEntry] = searchFormNames.month[dateInfo["MaxMonth"]] + dateInfo["MaxYear"];
            }
            tableEntry += 1;
            templateVars["t"+tableEntry] = "Restrict by: ";
            templateVars["v"+tableEntry] = searchFormNames.restrictBy[dateInfo["Restrict by"]];
          }
          return templateVars
        }

        function initializeFormNames() {
        // used translate form values in the Google advanced patent search form to names used in the search term
        // summary on a search tab
          return {                             // translate form fields to names used in the search term summary table
          "formFields" : {
            "as_q" : "All of: ",
            "as_epq" : "Exactly: ",
            "as_oq" : "At least one: ",
            "as_eq" : "None of: ",
            "as_pnum" : "Patent: ",
            "as_vt" : "Title: ",
            "as_pinvent" : "Inventor: ",
            "as_pasgnee" : "Assignee: ",
            "as_pusc" : "US class: ",
            "as_pintlc" : "Int'l class: ",
            "as_pcoopc" : "Coop class: ",
            "as_ptypeorstatus" : "Type: ",
            "as_drrb_is" : "ChkBoxPatDateOptions",    // value 'q' anytime; value 'b' between dates
            "as_minm_is" : "MinMonth",
            "as_miny_is" : "MinYear",
            "as_maxm_is" : "MaxMonth",
            "as_maxy_is" : "MaxYear",
            "as_pdatetype" : "Restrict by"          // value '1' application date; value '2' issue date
            },
          "type" : {
            "0" : "Any", "1" : "Application", "2" : "Issued", "3" : "Utility", "4" : "Design", "5" : "Plant",
            "6" : "Other", "7" : "Other", "8" : "Other"
            },
          "restrictBy" : {
            "1" : "Appl. date", "2" : "Issue date"
            },
          "month" : {
            "0" : "", "1" : "Jan ", "2" : "Feb ", "3" : "Mar ", "4" : "Apr ", "5" : "May ", "6" : "Jun ",
            "7" : "Jul ", "8" : "Aug ", "9" : "Sep ", "10" : "Oct ", "11" : "Nov ", "12" : "Dec "
            }
          };
        }

        function initializeTemplateVars() {
        // initialize the object that will be passed to the templating engine to populate the search terms table
          return {
            "t1" : "", "v1" : "",
            "t2" : "", "v2" : "",
            "t3" : "", "v3" : "",
            "t4" : "", "v4" : "",
            "t5" : "", "v5" : "",
            "t6" : "", "v6" : "",
            "t7" : "", "v7" : "",
            "t8" : "", "v8" : "",
            "t9" : "", "v9" : "",
            "t10" : "", "v10" : "",
            "t11" : "", "v11" : "",
            "t12" : "", "v12" : "",
            "t13" : "", "v13" : "",
            "t14" : "", "v14" : "",
            "t15" : "", "v15" : "",
            "t16" : "", "v16" : ""
          };
        }
      }
